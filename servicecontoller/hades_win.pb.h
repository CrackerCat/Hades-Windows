// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hades_win.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hades_5fwin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hades_5fwin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hades_5fwin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hades_5fwin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hades_5fwin_2eproto;
namespace proto {
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_MessageEntry_DoNotUse;
struct Command_MessageEntry_DoNotUseDefaultTypeInternal;
extern Command_MessageEntry_DoNotUseDefaultTypeInternal _Command_MessageEntry_DoNotUse_default_instance_;
class RawData;
struct RawDataDefaultTypeInternal;
extern RawDataDefaultTypeInternal _RawData_default_instance_;
class Record;
struct RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class Record_MessageEntry_DoNotUse;
struct Record_MessageEntry_DoNotUseDefaultTypeInternal;
extern Record_MessageEntry_DoNotUseDefaultTypeInternal _Record_MessageEntry_DoNotUse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Command* Arena::CreateMaybeMessage<::proto::Command>(Arena*);
template<> ::proto::Command_MessageEntry_DoNotUse* Arena::CreateMaybeMessage<::proto::Command_MessageEntry_DoNotUse>(Arena*);
template<> ::proto::RawData* Arena::CreateMaybeMessage<::proto::RawData>(Arena*);
template<> ::proto::Record* Arena::CreateMaybeMessage<::proto::Record>(Arena*);
template<> ::proto::Record_MessageEntry_DoNotUse* Arena::CreateMaybeMessage<::proto::Record_MessageEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class RawData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RawData) */ {
 public:
  inline RawData() : RawData(nullptr) {}
  ~RawData() override;
  explicit constexpr RawData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RawData(const RawData& from);
  RawData(RawData&& from) noexcept
    : RawData() {
    *this = ::std::move(from);
  }

  inline RawData& operator=(const RawData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RawData& operator=(RawData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RawData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RawData* internal_default_instance() {
    return reinterpret_cast<const RawData*>(
               &_RawData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RawData& a, RawData& b) {
    a.Swap(&b);
  }
  inline void Swap(RawData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RawData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RawData* New() const final {
    return new RawData();
  }

  RawData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RawData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RawData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RawData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RawData";
  }
  protected:
  explicit RawData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntranetIPv4FieldNumber = 1,
    kIntranetIPv6FieldNumber = 2,
    kPkgFieldNumber = 7,
    kHostnameFieldNumber = 3,
    kAgentIDFieldNumber = 4,
    kVersionFieldNumber = 6,
    kTimestampFieldNumber = 5,
  };
  // repeated string IntranetIPv4 = 1;
  int intranetipv4_size() const;
  private:
  int _internal_intranetipv4_size() const;
  public:
  void clear_intranetipv4();
  const std::string& intranetipv4(int index) const;
  std::string* mutable_intranetipv4(int index);
  void set_intranetipv4(int index, const std::string& value);
  void set_intranetipv4(int index, std::string&& value);
  void set_intranetipv4(int index, const char* value);
  void set_intranetipv4(int index, const char* value, size_t size);
  std::string* add_intranetipv4();
  void add_intranetipv4(const std::string& value);
  void add_intranetipv4(std::string&& value);
  void add_intranetipv4(const char* value);
  void add_intranetipv4(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& intranetipv4() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_intranetipv4();
  private:
  const std::string& _internal_intranetipv4(int index) const;
  std::string* _internal_add_intranetipv4();
  public:

  // repeated string IntranetIPv6 = 2;
  int intranetipv6_size() const;
  private:
  int _internal_intranetipv6_size() const;
  public:
  void clear_intranetipv6();
  const std::string& intranetipv6(int index) const;
  std::string* mutable_intranetipv6(int index);
  void set_intranetipv6(int index, const std::string& value);
  void set_intranetipv6(int index, std::string&& value);
  void set_intranetipv6(int index, const char* value);
  void set_intranetipv6(int index, const char* value, size_t size);
  std::string* add_intranetipv6();
  void add_intranetipv6(const std::string& value);
  void add_intranetipv6(std::string&& value);
  void add_intranetipv6(const char* value);
  void add_intranetipv6(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& intranetipv6() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_intranetipv6();
  private:
  const std::string& _internal_intranetipv6(int index) const;
  std::string* _internal_add_intranetipv6();
  public:

  // repeated .proto.Record Pkg = 7;
  int pkg_size() const;
  private:
  int _internal_pkg_size() const;
  public:
  void clear_pkg();
  ::proto::Record* mutable_pkg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Record >*
      mutable_pkg();
  private:
  const ::proto::Record& _internal_pkg(int index) const;
  ::proto::Record* _internal_add_pkg();
  public:
  const ::proto::Record& pkg(int index) const;
  ::proto::Record* add_pkg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Record >&
      pkg() const;

  // string Hostname = 3;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_MUST_USE_RESULT std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string AgentID = 4;
  void clear_agentid();
  const std::string& agentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_agentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_agentid();
  PROTOBUF_MUST_USE_RESULT std::string* release_agentid();
  void set_allocated_agentid(std::string* agentid);
  private:
  const std::string& _internal_agentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agentid(const std::string& value);
  std::string* _internal_mutable_agentid();
  public:

  // string Version = 6;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int64 Timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.RawData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> intranetipv4_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> intranetipv6_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Record > pkg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agentid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hades_5fwin_2eproto;
};
// -------------------------------------------------------------------

class Record_MessageEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Record_MessageEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Record_MessageEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Record_MessageEntry_DoNotUse();
  explicit constexpr Record_MessageEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Record_MessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Record_MessageEntry_DoNotUse& other);
  static const Record_MessageEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Record_MessageEntry_DoNotUse*>(&_Record_MessageEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto.Record.MessageEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto.Record.MessageEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Record) */ {
 public:
  inline Record() : Record(nullptr) {}
  ~Record() override;
  explicit constexpr Record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Record& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return new Record();
  }

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Record& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Record";
  }
  protected:
  explicit Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // map<string, string> message = 1;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_message() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_message();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      message() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_message();

  // @@protoc_insertion_point(class_scope:proto.Record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Record_MessageEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hades_5fwin_2eproto;
};
// -------------------------------------------------------------------

class Command_MessageEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Command_MessageEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Command_MessageEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Command_MessageEntry_DoNotUse();
  explicit constexpr Command_MessageEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Command_MessageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Command_MessageEntry_DoNotUse& other);
  static const Command_MessageEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Command_MessageEntry_DoNotUse*>(&_Command_MessageEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto.Command.MessageEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto.Command.MessageEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit constexpr Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Command* New() const final {
    return new Command();
  }

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Command& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kAgentCtrlFieldNumber = 1,
  };
  // map<string, string> message = 2;
  int message_size() const;
  private:
  int _internal_message_size() const;
  public:
  void clear_message();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_message() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_message();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      message() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_message();

  // int32 AgentCtrl = 1;
  void clear_agentctrl();
  ::PROTOBUF_NAMESPACE_ID::int32 agentctrl() const;
  void set_agentctrl(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agentctrl() const;
  void _internal_set_agentctrl(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Command_MessageEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> message_;
  ::PROTOBUF_NAMESPACE_ID::int32 agentctrl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hades_5fwin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RawData

// repeated string IntranetIPv4 = 1;
inline int RawData::_internal_intranetipv4_size() const {
  return intranetipv4_.size();
}
inline int RawData::intranetipv4_size() const {
  return _internal_intranetipv4_size();
}
inline void RawData::clear_intranetipv4() {
  intranetipv4_.Clear();
}
inline std::string* RawData::add_intranetipv4() {
  std::string* _s = _internal_add_intranetipv4();
  // @@protoc_insertion_point(field_add_mutable:proto.RawData.IntranetIPv4)
  return _s;
}
inline const std::string& RawData::_internal_intranetipv4(int index) const {
  return intranetipv4_.Get(index);
}
inline const std::string& RawData::intranetipv4(int index) const {
  // @@protoc_insertion_point(field_get:proto.RawData.IntranetIPv4)
  return _internal_intranetipv4(index);
}
inline std::string* RawData::mutable_intranetipv4(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RawData.IntranetIPv4)
  return intranetipv4_.Mutable(index);
}
inline void RawData::set_intranetipv4(int index, const std::string& value) {
  intranetipv4_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto.RawData.IntranetIPv4)
}
inline void RawData::set_intranetipv4(int index, std::string&& value) {
  intranetipv4_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto.RawData.IntranetIPv4)
}
inline void RawData::set_intranetipv4(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  intranetipv4_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.RawData.IntranetIPv4)
}
inline void RawData::set_intranetipv4(int index, const char* value, size_t size) {
  intranetipv4_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.RawData.IntranetIPv4)
}
inline std::string* RawData::_internal_add_intranetipv4() {
  return intranetipv4_.Add();
}
inline void RawData::add_intranetipv4(const std::string& value) {
  intranetipv4_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.RawData.IntranetIPv4)
}
inline void RawData::add_intranetipv4(std::string&& value) {
  intranetipv4_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.RawData.IntranetIPv4)
}
inline void RawData::add_intranetipv4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  intranetipv4_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.RawData.IntranetIPv4)
}
inline void RawData::add_intranetipv4(const char* value, size_t size) {
  intranetipv4_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.RawData.IntranetIPv4)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RawData::intranetipv4() const {
  // @@protoc_insertion_point(field_list:proto.RawData.IntranetIPv4)
  return intranetipv4_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RawData::mutable_intranetipv4() {
  // @@protoc_insertion_point(field_mutable_list:proto.RawData.IntranetIPv4)
  return &intranetipv4_;
}

// repeated string IntranetIPv6 = 2;
inline int RawData::_internal_intranetipv6_size() const {
  return intranetipv6_.size();
}
inline int RawData::intranetipv6_size() const {
  return _internal_intranetipv6_size();
}
inline void RawData::clear_intranetipv6() {
  intranetipv6_.Clear();
}
inline std::string* RawData::add_intranetipv6() {
  std::string* _s = _internal_add_intranetipv6();
  // @@protoc_insertion_point(field_add_mutable:proto.RawData.IntranetIPv6)
  return _s;
}
inline const std::string& RawData::_internal_intranetipv6(int index) const {
  return intranetipv6_.Get(index);
}
inline const std::string& RawData::intranetipv6(int index) const {
  // @@protoc_insertion_point(field_get:proto.RawData.IntranetIPv6)
  return _internal_intranetipv6(index);
}
inline std::string* RawData::mutable_intranetipv6(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RawData.IntranetIPv6)
  return intranetipv6_.Mutable(index);
}
inline void RawData::set_intranetipv6(int index, const std::string& value) {
  intranetipv6_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto.RawData.IntranetIPv6)
}
inline void RawData::set_intranetipv6(int index, std::string&& value) {
  intranetipv6_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto.RawData.IntranetIPv6)
}
inline void RawData::set_intranetipv6(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  intranetipv6_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.RawData.IntranetIPv6)
}
inline void RawData::set_intranetipv6(int index, const char* value, size_t size) {
  intranetipv6_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.RawData.IntranetIPv6)
}
inline std::string* RawData::_internal_add_intranetipv6() {
  return intranetipv6_.Add();
}
inline void RawData::add_intranetipv6(const std::string& value) {
  intranetipv6_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.RawData.IntranetIPv6)
}
inline void RawData::add_intranetipv6(std::string&& value) {
  intranetipv6_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.RawData.IntranetIPv6)
}
inline void RawData::add_intranetipv6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  intranetipv6_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.RawData.IntranetIPv6)
}
inline void RawData::add_intranetipv6(const char* value, size_t size) {
  intranetipv6_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.RawData.IntranetIPv6)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RawData::intranetipv6() const {
  // @@protoc_insertion_point(field_list:proto.RawData.IntranetIPv6)
  return intranetipv6_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RawData::mutable_intranetipv6() {
  // @@protoc_insertion_point(field_mutable_list:proto.RawData.IntranetIPv6)
  return &intranetipv6_;
}

// string Hostname = 3;
inline void RawData::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& RawData::hostname() const {
  // @@protoc_insertion_point(field_get:proto.RawData.Hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RawData::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.RawData.Hostname)
}
inline std::string* RawData::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:proto.RawData.Hostname)
  return _s;
}
inline const std::string& RawData::_internal_hostname() const {
  return hostname_.Get();
}
inline void RawData::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RawData::_internal_mutable_hostname() {
  
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RawData::release_hostname() {
  // @@protoc_insertion_point(field_release:proto.RawData.Hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RawData::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:proto.RawData.Hostname)
}

// string AgentID = 4;
inline void RawData::clear_agentid() {
  agentid_.ClearToEmpty();
}
inline const std::string& RawData::agentid() const {
  // @@protoc_insertion_point(field_get:proto.RawData.AgentID)
  return _internal_agentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RawData::set_agentid(ArgT0&& arg0, ArgT... args) {
 
 agentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.RawData.AgentID)
}
inline std::string* RawData::mutable_agentid() {
  std::string* _s = _internal_mutable_agentid();
  // @@protoc_insertion_point(field_mutable:proto.RawData.AgentID)
  return _s;
}
inline const std::string& RawData::_internal_agentid() const {
  return agentid_.Get();
}
inline void RawData::_internal_set_agentid(const std::string& value) {
  
  agentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RawData::_internal_mutable_agentid() {
  
  return agentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RawData::release_agentid() {
  // @@protoc_insertion_point(field_release:proto.RawData.AgentID)
  return agentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RawData::set_allocated_agentid(std::string* agentid) {
  if (agentid != nullptr) {
    
  } else {
    
  }
  agentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agentid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:proto.RawData.AgentID)
}

// int64 Timestamp = 5;
inline void RawData::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RawData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RawData::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.RawData.Timestamp)
  return _internal_timestamp();
}
inline void RawData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void RawData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.RawData.Timestamp)
}

// string Version = 6;
inline void RawData::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& RawData::version() const {
  // @@protoc_insertion_point(field_get:proto.RawData.Version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RawData::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.RawData.Version)
}
inline std::string* RawData::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:proto.RawData.Version)
  return _s;
}
inline const std::string& RawData::_internal_version() const {
  return version_.Get();
}
inline void RawData::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RawData::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RawData::release_version() {
  // @@protoc_insertion_point(field_release:proto.RawData.Version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RawData::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:proto.RawData.Version)
}

// repeated .proto.Record Pkg = 7;
inline int RawData::_internal_pkg_size() const {
  return pkg_.size();
}
inline int RawData::pkg_size() const {
  return _internal_pkg_size();
}
inline void RawData::clear_pkg() {
  pkg_.Clear();
}
inline ::proto::Record* RawData::mutable_pkg(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RawData.Pkg)
  return pkg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Record >*
RawData::mutable_pkg() {
  // @@protoc_insertion_point(field_mutable_list:proto.RawData.Pkg)
  return &pkg_;
}
inline const ::proto::Record& RawData::_internal_pkg(int index) const {
  return pkg_.Get(index);
}
inline const ::proto::Record& RawData::pkg(int index) const {
  // @@protoc_insertion_point(field_get:proto.RawData.Pkg)
  return _internal_pkg(index);
}
inline ::proto::Record* RawData::_internal_add_pkg() {
  return pkg_.Add();
}
inline ::proto::Record* RawData::add_pkg() {
  ::proto::Record* _add = _internal_add_pkg();
  // @@protoc_insertion_point(field_add:proto.RawData.Pkg)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Record >&
RawData::pkg() const {
  // @@protoc_insertion_point(field_list:proto.RawData.Pkg)
  return pkg_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Record

// map<string, string> message = 1;
inline int Record::_internal_message_size() const {
  return message_.size();
}
inline int Record::message_size() const {
  return _internal_message_size();
}
inline void Record::clear_message() {
  message_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Record::_internal_message() const {
  return message_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Record::message() const {
  // @@protoc_insertion_point(field_map:proto.Record.message)
  return _internal_message();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Record::_internal_mutable_message() {
  return message_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Record::mutable_message() {
  // @@protoc_insertion_point(field_mutable_map:proto.Record.message)
  return _internal_mutable_message();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Command

// int32 AgentCtrl = 1;
inline void Command::clear_agentctrl() {
  agentctrl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::_internal_agentctrl() const {
  return agentctrl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Command::agentctrl() const {
  // @@protoc_insertion_point(field_get:proto.Command.AgentCtrl)
  return _internal_agentctrl();
}
inline void Command::_internal_set_agentctrl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  agentctrl_ = value;
}
inline void Command::set_agentctrl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agentctrl(value);
  // @@protoc_insertion_point(field_set:proto.Command.AgentCtrl)
}

// map<string, string> message = 2;
inline int Command::_internal_message_size() const {
  return message_.size();
}
inline int Command::message_size() const {
  return _internal_message_size();
}
inline void Command::clear_message() {
  message_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Command::_internal_message() const {
  return message_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Command::message() const {
  // @@protoc_insertion_point(field_map:proto.Command.message)
  return _internal_message();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Command::_internal_mutable_message() {
  return message_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Command::mutable_message() {
  // @@protoc_insertion_point(field_mutable_map:proto.Command.message)
  return _internal_mutable_message();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hades_5fwin_2eproto
